<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<ChakraDefinitions>
  <!--
  ***************************************
  **
  ** ChakraCore.h
  **
  ***************************************
  -->
  <Export name="JsInitializeModuleRecord" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Initialize a ModuleRecord from host
/// </summary>
/// <remarks>
///     Bootstrap the module loading process by creating a new module record.
/// </remarks>
/// <param name="referencingModule">The referencingModule as in HostResolveImportedModule (15.2.1.17). nullptr if this is the top level module.</param>
/// <param name="normalizedSpecifier">The host normalized specifier. This is the key to a unique ModuleRecord.</param>
/// <param name="moduleRecord">The new ModuleRecord created. The host should not try to call this API twice with the same normalizedSpecifier.
///                           chakra will return an existing ModuleRecord if the specifier was passed in before.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsModuleRecord" name="referencingModule" />
      <Parameter type="JsValueRef" name="normalizedSpecifier" />
      <Parameter type="JsModuleRecord" name="moduleRecord" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsParseModuleSource" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Parse the module source
/// </summary>
/// <remarks>
/// This is basically ParseModule operation in ES6 spec. It is slightly different in that the ModuleRecord was initialized earlier, and passed in as an argument.
/// </remarks>
/// <param name="requestModule">The ModuleRecord that holds the parse tree of the source code.</param>
/// <param name="sourceContext">A cookie identifying the script that can be used by debuggable script contexts.</param>
/// <param name="script">The source script to be parsed, but not executed in this code.</param>
/// <param name="scriptLength">The source length of sourceText. The input might contain embedded null.</param>
/// <param name="sourceFlag">The type of the source code passed in. It could be UNICODE or utf8 at this time.</param>
/// <param name="exceptionValueRef">The error object if there is parse error.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsModuleRecord" name="requestModule" />
      <Parameter type="JsSourceContext" name="sourceContext" />
      <Parameter type="byte[]" name="script" />
      <Parameter type="uint" name="scriptLength" />
      <Parameter type="JsParseModuleSourceFlags" name="sourceFlag" />
      <Parameter type="JsValueRef" name="exceptionValueRef" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsModuleEvaluation" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Execute module code.
/// </summary>
/// <remarks>
///     This method implements 15.2.1.1.6.5, "ModuleEvaluation" concrete method.
///     When this methid is called, the chakra engine should have notified the host that the module and all its dependent are ready to be executed.
///     One moduleRecord will be executed only once. Additional execution call on the same moduleRecord will fail.
/// </remarks>
/// <param name="requestModule">The module to be executed.</param>
/// <param name="result">The return value of the module.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsModuleRecord" name="requestModule" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsSetModuleHostInfo" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Set the host info for the specified module.
/// </summary>
/// <param name="requestModule">The request module.</param>
/// <param name="moduleHostInfo">The type of host info to be set.</param>
/// <param name="hostInfo">The host info to be set.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsModuleRecord" name="requestModule" />
      <Parameter type="JsModuleHostInfoKind" name="moduleHostInfo" />
      <Parameter type="IntPtr" name="hostInfo" />
    </Parameters>
  </Export>
  <Export name="JsGetModuleHostInfo" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Retrieve the host info for the specified module.
/// </summary>
/// <param name="requestModule">The request module.</param>
/// <param name="moduleHostInfo">The type of host info to get.</param>
/// <param name="hostInfo">The host info to be retrieved.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsModuleRecord" name="requestModule" />
      <Parameter type="JsModuleHostInfoKind" name="moduleHostInfo" />
      <Parameter type="IntPtr" name="hostInfo" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetAndClearExceptionWithMetadata" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Returns metadata relating to the exception that caused the runtime of the current context
///     to be in the exception state and resets the exception state for that runtime. The metadata
///     includes a reference to the exception itself.
/// </summary>
/// <remarks>
///     <para>
///     If the runtime of the current context is not in an exception state, this API will return
///     <c>JsErrorInvalidArgument</c>. If the runtime is disabled, this will return an exception
///     indicating that the script was terminated, but it will not clear the exception (the
///     exception will be cleared if the runtime is re-enabled using
///     <c>JsEnableRuntimeExecution</c>).
///     </para>
///     <para>
///     The metadata value is a javascript object with the following properties: <c>exception</c>, the
///     thrown exception object; <c>line</c>, the 0 indexed line number where the exception was thrown;
///     <c>column</c>, the 0 indexed column number where the exception was thrown; <c>length</c>, the
///     source-length of the cause of the exception; <c>source</c>, a string containing the line of
///     source code where the exception was thrown; and <c>url</c>, a string containing the name of
///     the script file containing the code that threw the exception.
///     </para>
///     <para>
///     Requires an active script context.
///     </para>
/// </remarks>
/// <param name="metadata">The exception metadata for the runtime of the current context.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="metadata" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreateString" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Create JavascriptString variable from ASCII or Utf8 string
/// </summary>
/// <remarks>
///     <para>
///        Requires an active script context.
///     </para>
///     <para>
///         Input string can be either ASCII or Utf8
///     </para>
/// </remarks>
/// <param name="content">Pointer to string memory.</param>
/// <param name="length">Number of bytes within the string</param>
/// <param name="value">JsValueRef representing the JavascriptString</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="content" />
      <Parameter type="size_t" name="length" />
      <Parameter type="JsValueRef" name="value" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreateStringUtf16" target="Common" source="ChakraCore.h" dllImportEx=", CharSet = CharSet.Unicode">
    <Description>
      <![CDATA[
/// <summary>
///     Create JavascriptString variable from Utf16 string
/// </summary>
/// <remarks>
///     <para>
///        Requires an active script context.
///     </para>
///     <para>
///         Expects Utf16 string
///     </para>
/// </remarks>
/// <param name="content">Pointer to string memory.</param>
/// <param name="length">Number of characters within the string</param>
/// <param name="value">JsValueRef representing the JavascriptString</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="content" />
      <Parameter type="size_t" name="length" />
      <Parameter type="JsValueRef" name="value" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCopyString" target="Common" source="ChakraCore.h" dllImportEx=", CharSet = CharSet.Ansi">
    <Description>
      <![CDATA[
/// <summary>
///     Write JavascriptString value into C string buffer (Utf8)
/// </summary>
/// <remarks>
///     <para>
///         When size of the `buffer` is unknown,
///         `buffer` argument can be nullptr.
///         In that case, `length` argument will return the length needed.
///     </para>
/// </remarks>
/// <param name="value">JavascriptString value</param>
/// <param name="buffer">Pointer to buffer</param>
/// <param name="bufferSize">Buffer size</param>
/// <param name="length">Total number of characters needed or written</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="value" />
      <Parameter type="char*" name="buffer" />
      <Parameter type="size_t" name="bufferSize" />
      <Parameter type="size_t" name="length" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCopyStringUtf16" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Write string value into Utf16 string buffer
/// </summary>
/// <remarks>
///     <para>
///         When size of the `buffer` is unknown,
///         `buffer` argument can be nullptr.
///         In that case, `written` argument will return the length needed.
///     </para>
///     <para>
///         when start is out of range or &lt; 0, returns JsErrorInvalidArgument
///         and `written` will be equal to 0.
///         If calculated length is 0 (It can be due to string length or `start`
///         and length combination), then `written` will be equal to 0 and call
///         returns JsNoError
///     </para>
/// </remarks>
/// <param name="value">JavascriptString value</param>
/// <param name="start">start offset of buffer</param>
/// <param name="length">length to be written</param>
/// <param name="buffer">Pointer to buffer</param>
/// <param name="written">Total number of characters written</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="value" />
      <Parameter type="int" name="start" />
      <Parameter type="int" name="length" />
      <Parameter type="uint16_t*" name="buffer" />
      <Parameter type="size_t" name="written" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsParse" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Parses a script and returns a function representing the script.
/// </summary>
/// <remarks>
///     <para>
///        Requires an active script context.
///     </para>
///     <para>
///         Script source can be either JavascriptString or JavascriptExternalArrayBuffer.
///         In case it is an ExternalArrayBuffer, and the encoding of the buffer is Utf16,
///         JsParseScriptAttributeArrayBufferIsUtf16Encoded is expected on parseAttributes.
///     </para>
///     <para>
///         Use JavascriptExternalArrayBuffer with Utf8/ASCII script source
///         for better performance and smaller memory footprint.
///     </para>
/// </remarks>
/// <param name="script">The script to run.</param>
/// <param name="sourceContext">
///     A cookie identifying the script that can be used by debuggable script contexts.
/// </param>
/// <param name="sourceUrl">The location the script came from.</param>
/// <param name="parseAttributes">Attribute mask for parsing the script</param>
/// <param name="result">The result of the compiled script.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="script" />
      <Parameter type="JsSourceContext" name="sourceContext" />
      <Parameter type="JsValueRef" name="sourceUrl" />
      <Parameter type="JsParseScriptAttributes" name="parseAttributes" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsRun" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Executes a script.
/// </summary>
/// <remarks>
///     <para>
///        Requires an active script context.
///     </para>
///     <para>
///         Script source can be either JavascriptString or JavascriptExternalArrayBuffer.
///         In case it is an ExternalArrayBuffer, and the encoding of the buffer is Utf16,
///         JsParseScriptAttributeArrayBufferIsUtf16Encoded is expected on parseAttributes.
///     </para>
///     <para>
///         Use JavascriptExternalArrayBuffer with Utf8/ASCII script source
///         for better performance and smaller memory footprint.
///     </para>
/// </remarks>
/// <param name="script">The script to run.</param>
/// <param name="sourceContext">
///     A cookie identifying the script that can be used by debuggable script contexts.
/// </param>
/// <param name="sourceUrl">The location the script came from</param>
/// <param name="parseAttributes">Attribute mask for parsing the script</param>
/// <param name="result">The result of the script, if any. This parameter can be null.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="script" />
      <Parameter type="JsSourceContext" name="sourceContext" />
      <Parameter type="JsValueRef" name="sourceUrl" />
      <Parameter type="JsParseScriptAttributes" name="parseAttributes" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreatePropertyId" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates the property ID associated with the name.
/// </summary>
/// <remarks>
///     <para>
///         Property IDs are specific to a context and cannot be used across contexts.
///     </para>
///     <para>
///         Requires an active script context.
///     </para>
/// </remarks>
/// <param name="name">
///     The name of the property ID to get or create. The name may consist of only digits.
///     The string is expected to be ASCII / utf8 encoded.
/// </param>
/// <param name="length">length of the name in bytes</param>
/// <param name="propertyId">The property ID in this runtime for the given name.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="name" />
      <Parameter type="size_t" name="length" />
      <Parameter type="JsPropertyIdRef" name="propertyId" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCopyPropertyId" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Copies the name associated with the property ID into a buffer.
/// </summary>
/// <remarks>
///     <para>
///         Requires an active script context.
///     </para>
///     <para>
///         When size of the `buffer` is unknown,
///         `buffer` argument can be nullptr.
///         `length` argument will return the size needed.
///     </para>
/// </remarks>
/// <param name="propertyId">The property ID to get the name of.</param>
/// <param name="buffer">The buffer holding the name associated with the property ID, encoded as utf8</param>
/// <param name="bufferSize">Size of the buffer.</param>
/// <param name="written">Total number of characters written or to be written</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsPropertyIdRef" name="propertyId" />
      <Parameter type="char*" name="buffer" />
      <Parameter type="size_t" name="bufferSize" />
      <Parameter type="size_t" name="length" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsSerialize" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Serializes a parsed script to a buffer than can be reused.
/// </summary>
/// <remarks>
///     <para>
///     <c>JsSerializeScript</c> parses a script and then stores the parsed form of the script in a
///     runtime-independent format. The serialized script then can be deserialized in any
///     runtime without requiring the script to be re-parsed.
///     </para>
///     <para>
///     Requires an active script context.
///     </para>
///     <para>
///         Script source can be either JavascriptString or JavascriptExternalArrayBuffer.
///         In case it is an ExternalArrayBuffer, and the encoding of the buffer is Utf16,
///         JsParseScriptAttributeArrayBufferIsUtf16Encoded is expected on parseAttributes.
///     </para>
///     <para>
///         Use JavascriptExternalArrayBuffer with Utf8/ASCII script source
///         for better performance and smaller memory footprint.
///     </para>
/// </remarks>
/// <param name="script">The script to serialize</param>
/// <param name="buffer">ArrayBuffer</param>
/// <param name="parseAttributes">Encoding for the script.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="script" />
      <Parameter type="JsValueRef" name="buffer" direction="Out" />
      <Parameter type="JsParseScriptAttributes" name="parseAttributes" />
    </Parameters>
  </Export>
  <Export name="JsParseSerialized" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Parses a serialized script and returns a function representing the script.
///     Provides the ability to lazy load the script source only if/when it is needed.
/// </summary>
/// <remarks>
///     <para>
///     Requires an active script context.
///     </para>
/// </remarks>
/// <param name="buffer">The serialized script as an ArrayBuffer (preferably ExternalArrayBuffer).</param>
/// <param name="scriptLoadCallback">
///     Callback called when the source code of the script needs to be loaded.
///     This is an optional parameter, set to null if not needed.
/// </param>
/// <param name="sourceContext">
///     A cookie identifying the script that can be used by debuggable script contexts.
///     This context will passed into scriptLoadCallback.
/// </param>
/// <param name="sourceUrl">The location the script came from.</param>
/// <param name="result">A function representing the script code.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="buffer" />
      <Parameter type="JsSerializedLoadScriptCallback" name="scriptLoadCallback" />
      <Parameter type="JsSourceContext" name="sourceContext" />
      <Parameter type="JsValueRef" name="sourceUrl" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsRunSerialized" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Runs a serialized script.
///     Provides the ability to lazy load the script source only if/when it is needed.
/// </summary>
/// <remarks>
///     <para>
///     Requires an active script context.
///     </para>
///     <para>
///     The runtime will hold on to the buffer until all instances of any functions created from
///     the buffer are garbage collected.
///     </para>
/// </remarks>
/// <param name="buffer">The serialized script as an ArrayBuffer (preferably ExternalArrayBuffer).</param>
/// <param name="scriptLoadCallback">Callback called when the source code of the script needs to be loaded.</param>
/// <param name="sourceContext">
///     A cookie identifying the script that can be used by debuggable script contexts.
///     This context will passed into scriptLoadCallback.
/// </param>
/// <param name="sourceUrl">The location the script came from.</param>
/// <param name="result">
///     The result of running the script, if any. This parameter can be null.
/// </param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="buffer" />
      <Parameter type="JsSerializedLoadScriptCallback" name="scriptLoadCallback" />
      <Parameter type="JsSourceContext" name="sourceContext" />
      <Parameter type="JsValueRef" name="sourceUrl" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreatePromise" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a new JavaScript Promise object.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="promise">The new Promise object.</param>
/// <param name="resolveFunction">The function called to resolve the created Promise object.</param>
/// <param name="rejectFunction">The function called to reject the created Promise object.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="promise" direction="Out" />
      <Parameter type="JsValueRef" name="resolveFunction" direction="Out" />
      <Parameter type="JsValueRef" name="rejectFunction" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreateWeakReference" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a weak reference to a value.
/// </summary>
/// <param name="value">The value to be referenced.</param>
/// <param name="weakRef">Weak reference to the value.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="value" />
      <Parameter type="IntPtr" name="weakRef" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetWeakReferenceValue" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets a strong reference to the value referred to by a weak reference.
/// </summary>
/// <param name="weakRef">A weak reference.</param>
/// <param name="value">Reference to the value, or <c>JS_INVALID_REFERENCE</c> if the value is
///     no longer available.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsWeakRef" name="weakRef" />
      <Parameter type="JsValueRef" name="value" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreateSharedArrayBufferWithSharedContent" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a Javascript SharedArrayBuffer object with shared content get from JsGetSharedArrayBufferContent.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="sharedContents">
///     The storage object of a SharedArrayBuffer which can be shared between multiple thread.
/// </param>
/// <param name="result">The new SharedArrayBuffer object.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsSharedArrayBufferContentHandle" name="sharedContents" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetSharedArrayBufferContent" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Get the storage object from a SharedArrayBuffer.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="sharedArrayBuffer">The SharedArrayBuffer object.</param>
/// <param name="sharedContents">
///     The storage object of a SharedArrayBuffer which can be shared between multiple thread.
///     User should call JsReleaseSharedArrayBufferContentHandle after finished using it.
/// </param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="sharedArrayBuffer" />
      <Parameter type="IntPtr" name="sharedContents" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsReleaseSharedArrayBufferContentHandle" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Decrease the reference count on a SharedArrayBuffer storage object.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="sharedContents">
///     The storage object of a SharedArrayBuffer which can be shared between multiple thread.
/// </param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsSharedArrayBufferContentHandle" name="sharedContents" />
    </Parameters>
  </Export>
  <Export name="JsHasOwnProperty" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Determines whether an object has a non-inherited property.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="object">The object that may contain the property.</param>
/// <param name="propertyId">The ID of the property.</param>
/// <param name="hasOwnProperty">Whether the object has the non-inherited property.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="JsPropertyIdRef" name="propertyId" />
      <Parameter type="bool" name="hasOwnProperty" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCopyStringOneByte" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Write JS string value into char string buffer without a null terminator
/// </summary>
/// <remarks>
///     <para>
///         When size of the `buffer` is unknown,
///         `buffer` argument can be nullptr.
///         In that case, `written` argument will return the length needed.
///     </para>
///     <para>
///         When start is out of range or &lt; 0, returns JsErrorInvalidArgument
///         and `written` will be equal to 0.
///         If calculated length is 0 (It can be due to string length or `start`
///         and length combination), then `written` will be equal to 0 and call
///         returns JsNoError
///     </para>
///     <para>
///         The JS string `value` will be converted one utf16 code point at a time,
///         and if it has code points that do not fit in one byte, those values
///         will be truncated.
///     </para>
/// </remarks>
/// <param name="value">JavascriptString value</param>
/// <param name="start">Start offset of buffer</param>
/// <param name="length">Number of characters to be written</param>
/// <param name="buffer">Pointer to buffer</param>
/// <param name="written">Total number of characters written</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="value" />
      <Parameter type="int" name="start" />
      <Parameter type="int" name="length" />
      <Parameter type="char*" name="buffer" />
      <Parameter type="size_t" name="written" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetDataViewInfo" target="Common" source="ChakraCore.h">
    <Description>
      <![CDATA[
/// <summary>
///     Obtains frequently used properties of a data view.
/// </summary>
/// <param name="dataView">The data view instance.</param>
/// <param name="arrayBuffer">The ArrayBuffer backstore of the view.</param>
/// <param name="byteOffset">The offset in bytes from the start of arrayBuffer referenced by the array.</param>
/// <param name="byteLength">The number of bytes in the array.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="dataView" />
      <Parameter type="JsValueRef" name="arrayBuffer" direction="Out" />
      <Parameter type="uint" name="byteOffset" direction="Out" />
      <Parameter type="uint" name="byteLength" direction="Out" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** ChakraCommon.h
  **
  ***************************************
  -->
  <Export name="JsCreateRuntime" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a new runtime.
/// </summary>
/// <param name="attributes">The attributes of the runtime to be created.</param>
/// <param name="threadService">The thread service for the runtime. Can be null.</param>
/// <param name="runtime">The runtime created.</param>
/// <remarks>In the edge-mode binary, chakra.dll, this function lacks the <c>runtimeVersion</c>
/// parameter (compare to jsrt9.h).</remarks>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsRuntimeAttributes" name="attributes" />
      <Parameter type="JavaScriptThreadServiceCallback" name="threadService" />
      <Parameter type="JsRuntimeHandle" name="runtime" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCollectGarbage" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Performs a full garbage collection.
/// </summary>
/// <param name="runtime">The runtime in which the garbage collection will be performed.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsRuntimeHandle" name="runtime" />
    </Parameters>
  </Export>
  <Export name="JsDisposeRuntime" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Disposes a runtime.
/// </summary>
/// <remarks>
///     Once a runtime has been disposed, all resources owned by it are invalid and cannot be used.
///     If the runtime is active (i.e. it is set to be current on a particular thread), it cannot
///     be disposed.
/// </remarks>
/// <param name="runtime">The runtime to dispose.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="IntPtr" name="runtime" />
    </Parameters>
  </Export>
  <Export name="JsGetRuntimeMemoryUsage" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the current memory usage for a runtime.
/// </summary>
/// <remarks>
///     Memory usage can be always be retrieved, regardless of whether or not the runtime is active
///     on another thread.
/// </remarks>
/// <param name="runtime">The runtime whose memory usage is to be retrieved.</param>
/// <param name="memoryUsage">The runtime's current memory usage, in bytes.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsRuntimeHandle" name="runtime" />
      <Parameter type="size_t" name="memoryUsage" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetRuntimeMemoryLimit" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the current memory limit for a runtime.
/// </summary>
/// <remarks>
///     The memory limit of a runtime can be always be retrieved, regardless of whether or not the
///     runtime is active on another thread.
/// </remarks>
/// <param name="runtime">The runtime whose memory limit is to be retrieved.</param>
/// <param name="memoryLimit">
///     The runtime's current memory limit, in bytes, or -1 if no limit has been set.
/// </param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsRuntimeHandle" name="runtime" />
      <Parameter type="size_t" name="memoryLimit" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsSetRuntimeMemoryLimit" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Sets the current memory limit for a runtime.
/// </summary>
/// <remarks>
///     <para>
///     A memory limit will cause any operation which exceeds the limit to fail with an "out of
///     memory" error. Setting a runtime's memory limit to -1 means that the runtime has no memory
///     limit. New runtimes  default to having no memory limit. If the new memory limit exceeds
///     current usage, the call will succeed and any future allocations in this runtime will fail
///     until the runtime's memory usage drops below the limit.
///     </para>
///     <para>
///     A runtime's memory limit can be always be set, regardless of whether or not the runtime is
///     active on another thread.
///     </para>
/// </remarks>
/// <param name="runtime">The runtime whose memory limit is to be set.</param>
/// <param name="memoryLimit">
///     The new runtime memory limit, in bytes, or -1 for no memory limit.
/// </param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsRuntimeHandle" name="runtime" />
      <Parameter type="size_t" name="memoryLimit" />
    </Parameters>
  </Export>
  <Export name="JsSetRuntimeMemoryAllocationCallback" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Sets a memory allocation callback for specified runtime
/// </summary>
/// <remarks>
///     <para>
///     Registering a memory allocation callback will cause the runtime to call back to the host
///     whenever it acquires memory from, or releases memory to, the OS. The callback routine is
///     called before the runtime memory manager allocates a block of memory. The allocation will
///     be rejected if the callback returns false. The runtime memory manager will also invoke the
///     callback routine after freeing a block of memory, as well as after allocation failures.
///     </para>
///     <para>
///     The callback is invoked on the current runtime execution thread, therefore execution is
///     blocked until the callback completes.
///     </para>
///     <para>
///     The return value of the callback is not stored; previously rejected allocations will not
///     prevent the runtime from invoking the callback again later for new memory allocations.
///     </para>
/// </remarks>
/// <param name="runtime">The runtime for which to register the allocation callback.</param>
/// <param name="callbackState">
///     User provided state that will be passed back to the callback.
/// </param>
/// <param name="allocationCallback">
///     Memory allocation callback to be called for memory allocation events.
/// </param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsRuntimeHandle" name="runtime" />
      <Parameter type="IntPtr" name="callbackState" />
      <Parameter type="JavaScriptMemoryAllocationCallback" name="allocationCallback" />
    </Parameters>
  </Export>
  <Export name="JsSetRuntimeBeforeCollectCallback" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Sets a callback function that is called by the runtime before garbage collection.
/// </summary>
/// <remarks>
///     <para>
///     The callback is invoked on the current runtime execution thread, therefore execution is
///     blocked until the callback completes.
///     </para>
///     <para>
///     The callback can be used by hosts to prepare for garbage collection. For example, by
///     releasing unnecessary references on Chakra objects.
///     </para>
/// </remarks>
/// <param name="runtime">The runtime for which to register the allocation callback.</param>
/// <param name="callbackState">
///     User provided state that will be passed back to the callback.
/// </param>
/// <param name="beforeCollectCallback">The callback function being set.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsRuntimeHandle" name="runtime" />
      <Parameter type="IntPtr" name="callbackState" />
      <Parameter type="JavaScriptBeforeCollectCallback" name="beforeCollectCallback" />
    </Parameters>
  </Export>
  <Export name="JsAddRef" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Adds a reference to a garbage collected object.
/// </summary>
/// <remarks>
///     This only needs to be called on <c>JsRef</c> handles that are not going to be stored
///     somewhere on the stack. Calling <c>JsAddRef</c> ensures that the object the <c>JsRef</c>
///     refers to will not be freed until <c>JsRelease</c> is called.
/// </remarks>
/// <param name="ref">The object to add a reference to.</param>
/// <param name="count">The object's new reference count (can pass in null).</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsRef" name="@ref" />
      <Parameter type="uint" name="count" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsRelease" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Releases a reference to a garbage collected object.
/// </summary>
/// <remarks>
///     Removes a reference to a <c>JsRef</c> handle that was created by <c>JsAddRef</c>.
/// </remarks>
/// <param name="ref">The object to add a reference to.</param>
/// <param name="count">The object's new reference count (can pass in null).</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsRef" name="@ref" />
      <Parameter type="uint" name="count" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsSetObjectBeforeCollectCallback" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Sets a callback function that is called by the runtime before garbage collection of
///     an object.
/// </summary>
/// <remarks>
///     <para>
///     The callback is invoked on the current runtime execution thread, therefore execution is
///     blocked until the callback completes.
///     </para>
/// </remarks>
/// <param name="ref">The object for which to register the callback.</param>
/// <param name="callbackState">
///     User provided state that will be passed back to the callback.
/// </param>
/// <param name="objectBeforeCollectCallback">The callback function being set. Use null to clear
///     previously registered callback.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsRef" name="@ref" />
      <Parameter type="IntPtr" name="callbackState" />
      <Parameter type="JavaScriptObjectBeforeCollectCallback" name="objectBeforeCollectCallback" />
    </Parameters>
  </Export>
  <Export name="JsCreateContext" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a script context for running scripts.
/// </summary>
/// <remarks>
///     Each script context has its own global object that is isolated from all other script
///     contexts.
/// </remarks>
/// <param name="runtime">The runtime the script context is being created in.</param>
/// <param name="newContext">The created script context.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsRuntimeHandle" name="runtime" />
      <Parameter type="JsContextRef" name="newContext" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetCurrentContext" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the current script context on the thread.
/// </summary>
/// <param name="currentContext">
///     The current script context on the thread, null if there is no current script context.
/// </param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsContextRef" name="currentContext" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsSetCurrentContext" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Sets the current script context on the thread.
/// </summary>
/// <param name="context">The script context to make current.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsContextRef" name="context" />
    </Parameters>
  </Export>
  <Export name="JsGetContextOfObject" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the script context that the object belongs to.
/// </summary>
/// <param name="object">The object to get the context from.</param>
/// <param name="context">The context the object belongs to.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="JsContextRef" name="context" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetContextData" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the internal data set on JsrtContext.
/// </summary>
/// <param name="context">The context to get the data from.</param>
/// <param name="data">The pointer to the data where data will be returned.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsContextRef" name="context" />
      <Parameter type="IntPtr" name="data" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsSetContextData" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Sets the internal data of JsrtContext.
/// </summary>
/// <param name="context">The context to set the data to.</param>
/// <param name="data">The pointer to the data to be set.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsContextRef" name="context" />
      <Parameter type="IntPtr" name="data" />
    </Parameters>
  </Export>
  <Export name="JsGetRuntime" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the runtime that the context belongs to.
/// </summary>
/// <param name="context">The context to get the runtime from.</param>
/// <param name="runtime">The runtime the context belongs to.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsContextRef" name="context" />
      <Parameter type="JsRuntimeHandle" name="runtime" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsIdle" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Tells the runtime to do any idle processing it need to do.
/// </summary>
/// <remarks>
///     <para>
///     If idle processing has been enabled for the current runtime, calling <c>JsIdle</c> will
///     inform the current runtime that the host is idle and that the runtime can perform
///     memory cleanup tasks.
///     </para>
///     <para>
///     <c>JsIdle</c> can also return the number of system ticks until there will be more idle work
///     for the runtime to do. Calling <c>JsIdle</c> before this number of ticks has passed will do
///     no work.
///     </para>
///     <para>
///     Requires an active script context.
///     </para>
/// </remarks>
/// <param name="nextIdleTick">
///     The next system tick when there will be more idle work to do. Can be null. Returns the
///     maximum number of ticks if there no upcoming idle work to do.
/// </param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint" name="nextIdleTick" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetSymbolFromPropertyId" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the symbol associated with the property ID.
/// </summary>
/// <remarks>
///     <para>
///     Requires an active script context.
///     </para>
/// </remarks>
/// <param name="propertyId">The property ID to get the symbol of.</param>
/// <param name="symbol">The symbol associated with the property ID.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsPropertyIdRef" name="propertyId" />
      <Parameter type="JsValueRef" name="symbol" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetPropertyIdType" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the type of property
/// </summary>
/// <remarks>
///     <para>
///     Requires an active script context.
///     </para>
/// </remarks>
/// <param name="propertyId">The property ID to get the type of.</param>
/// <param name="propertyIdType">The JsPropertyIdType of the given property ID</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsPropertyIdRef" name="propertyId" />
      <Parameter type="JsPropertyIdType" name="propertyIdType" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetPropertyIdFromSymbol" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the property ID associated with the symbol.
/// </summary>
/// <remarks>
///     <para>
///     Property IDs are specific to a context and cannot be used across contexts.
///     </para>
///     <para>
///     Requires an active script context.
///     </para>
/// </remarks>
/// <param name="symbol">
///     The symbol whose property ID is being retrieved.
/// </param>
/// <param name="propertyId">The property ID for the given symbol.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="symbol" />
      <Parameter type="JsPropertyIdRef" name="propertyId" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreateSymbol" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a Javascript symbol.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="description">The string description of the symbol. Can be null.</param>
/// <param name="result">The new symbol.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="description" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetOwnPropertySymbols" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the list of all symbol properties on the object.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="object">The object from which to get the property symbols.</param>
/// <param name="propertySymbols">An array of property symbols.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="JsValueRef" name="propertySymbols" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetUndefinedValue" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the value of <c>undefined</c> in the current script context.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="undefinedValue">The <c>undefined</c> value.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="undefinedValue" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetNullValue" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the value of <c>null</c> in the current script context.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="nullValue">The <c>null</c> value.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="nullValue" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetTrueValue" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the value of <c>true</c> in the current script context.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="trueValue">The <c>true</c> value.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="trueValue" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetFalseValue" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the value of <c>false</c> in the current script context.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="falseValue">The <c>false</c> value.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="falseValue" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsBoolToBoolean" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a Boolean value from a <c>bool</c> value.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="value">The value to be converted.</param>
/// <param name="booleanValue">The converted value.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="value" />
      <Parameter type="JsValueRef" name="booleanValue" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsBooleanToBool" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Retrieves the <c>bool</c> value of a Boolean value.
/// </summary>
/// <param name="value">The value to be converted.</param>
/// <param name="boolValue">The converted value.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="value" />
      <Parameter type="bool" name="boolValue" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsConvertValueToBoolean" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Converts the value to Boolean using standard JavaScript semantics.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="value">The value to be converted.</param>
/// <param name="booleanValue">The converted value.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="value" />
      <Parameter type="JsValueRef" name="booleanValue" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetValueType" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the JavaScript type of a JsValueRef.
/// </summary>
/// <param name="value">The value whose type is to be returned.</param>
/// <param name="type">The type of the value.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="value" />
      <Parameter type="JsValueType" name="type" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsDoubleToNumber" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a number value from a <c>double</c> value.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="doubleValue">The <c>double</c> to convert to a number value.</param>
/// <param name="value">The new number value.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="double" name="doubleValue" />
      <Parameter type="JsValueRef" name="value" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsIntToNumber" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a number value from an <c>int</c> value.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="intValue">The <c>int</c> to convert to a number value.</param>
/// <param name="value">The new number value.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="int" name="intValue" />
      <Parameter type="JsValueRef" name="value" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsNumberToDouble" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Retrieves the <c>double</c> value of a number value.
/// </summary>
/// <remarks>
///     This function retrieves the value of a number value. It will fail with
///     <c>JsErrorInvalidArgument</c> if the type of the value is not number.
/// </remarks>
/// <param name="value">The number value to convert to a <c>double</c> value.</param>
/// <param name="doubleValue">The <c>double</c> value.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="value" />
      <Parameter type="double" name="doubleValue" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsNumberToInt" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Retrieves the <c>int</c> value of a number value.
/// </summary>
/// <remarks>
///     This function retrieves the value of a number value and converts to an <c>int</c> value.
///     It will fail with <c>JsErrorInvalidArgument</c> if the type of the value is not number.
/// </remarks>
/// <param name="value">The number value to convert to an <c>int</c> value.</param>
/// <param name="intValue">The <c>int</c> value.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="value" />
      <Parameter type="int" name="intValue" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsConvertValueToNumber" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Converts the value to number using standard JavaScript semantics.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="value">The value to be converted.</param>
/// <param name="numberValue">The converted value.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="value" />
      <Parameter type="JsValueRef" name="numberValue" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetStringLength" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the length of a string value.
/// </summary>
/// <param name="stringValue">The string value to get the length of.</param>
/// <param name="length">The length of the string.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="stringValue" />
      <Parameter type="int" name="length" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsConvertValueToString" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Converts the value to string using standard JavaScript semantics.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="value">The value to be converted.</param>
/// <param name="stringValue">The converted value.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="value" />
      <Parameter type="JsValueRef" name="stringValue" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetGlobalObject" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the global object in the current script context.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="globalObject">The global object.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="globalObject" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreateObject" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a new object.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="object">The new object.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreateExternalObject" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a new object that stores some external data.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="data">External data that the object will represent. May be null.</param>
/// <param name="finalizeCallback">
///     A callback for when the object is finalized. May be null.
/// </param>
/// <param name="object">The new object.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="IntPtr" name="data" />
      <Parameter type="JsFinalizeCallback" name="finalizeCallback" />
      <Parameter type="JsValueRef" name="@object" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsConvertValueToObject" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Converts the value to object using standard JavaScript semantics.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="value">The value to be converted.</param>
/// <param name="object">The converted value.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="value" />
      <Parameter type="JsValueRef" name="@object" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetPrototype" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Returns the prototype of an object.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="object">The object whose prototype is to be returned.</param>
/// <param name="prototypeObject">The object's prototype.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="JsValueRef" name="prototypeObject" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsSetPrototype" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Sets the prototype of an object.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="object">The object whose prototype is to be changed.</param>
/// <param name="prototypeObject">The object's new prototype.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="JsValueRef" name="prototypeObject" />
    </Parameters>
  </Export>
  <Export name="JsInstanceOf" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Performs JavaScript "instanceof" operator test.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="object">The object to test.</param>
/// <param name="constructor">The constructor function to test against.</param>
/// <param name="result">Whether "object instanceof constructor" is true.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="JsValueRef" name="constructor" />
      <Parameter type="bool" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetExtensionAllowed" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Returns a value that indicates whether an object is extensible or not.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="object">The object to test.</param>
/// <param name="value">Whether the object is extensible or not.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="bool" name="value" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsPreventExtension" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Makes an object non-extensible.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="object">The object to make non-extensible.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
    </Parameters>
  </Export>
  <Export name="JsGetProperty" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets an object's property.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="object">The object that contains the property.</param>
/// <param name="propertyId">The ID of the property.</param>
/// <param name="value">The value of the property.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="JsPropertyIdRef" name="propertyId" />
      <Parameter type="JsValueRef" name="value" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetOwnPropertyDescriptor" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets a property descriptor for an object's own property.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="object">The object that has the property.</param>
/// <param name="propertyId">The ID of the property.</param>
/// <param name="propertyDescriptor">The property descriptor.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="JsPropertyIdRef" name="propertyId" />
      <Parameter type="JsValueRef" name="propertyDescriptor" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetOwnPropertyNames" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the list of all properties on the object.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="object">The object from which to get the property names.</param>
/// <param name="propertyNames">An array of property names.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="JsValueRef" name="propertyNames" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsSetProperty" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Puts an object's property.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="object">The object that contains the property.</param>
/// <param name="propertyId">The ID of the property.</param>
/// <param name="value">The new value of the property.</param>
/// <param name="useStrictRules">The property set should follow strict mode rules.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="JsPropertyIdRef" name="propertyId" />
      <Parameter type="JsValueRef" name="value" />
      <Parameter type="bool" name="useStrictRules" />
    </Parameters>
  </Export>
  <Export name="JsHasProperty" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Determines whether an object has a property.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="object">The object that may contain the property.</param>
/// <param name="propertyId">The ID of the property.</param>
/// <param name="hasProperty">Whether the object (or a prototype) has the property.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="JsPropertyIdRef" name="propertyId" />
      <Parameter type="bool" name="hasProperty" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsDeleteProperty" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Deletes an object's property.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="object">The object that contains the property.</param>
/// <param name="propertyId">The ID of the property.</param>
/// <param name="useStrictRules">The property set should follow strict mode rules.</param>
/// <param name="result">Whether the property was deleted.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="JsPropertyIdRef" name="propertyId" />
      <Parameter type="bool" name="useStrictRules" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsDefineProperty" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Defines a new object's own property from a property descriptor.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="object">The object that has the property.</param>
/// <param name="propertyId">The ID of the property.</param>
/// <param name="propertyDescriptor">The property descriptor.</param>
/// <param name="result">Whether the property was defined.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="JsPropertyIdRef" name="propertyId" />
      <Parameter type="JsValueRef" name="propertyDescriptor" />
      <Parameter type="bool" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsHasIndexedProperty" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Tests whether an object has a value at the specified index.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="object">The object to operate on.</param>
/// <param name="index">The index to test.</param>
/// <param name="result">Whether the object has a value at the specified index.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="JsValueRef" name="index" />
      <Parameter type="bool" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetIndexedProperty" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Retrieve the value at the specified index of an object.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="object">The object to operate on.</param>
/// <param name="index">The index to retrieve.</param>
/// <param name="result">The retrieved value.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="JsValueRef" name="index" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsSetIndexedProperty" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Set the value at the specified index of an object.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="object">The object to operate on.</param>
/// <param name="index">The index to set.</param>
/// <param name="value">The value to set.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="JsValueRef" name="index" />
      <Parameter type="JsValueRef" name="value" />
    </Parameters>
  </Export>
  <Export name="JsDeleteIndexedProperty" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Delete the value at the specified index of an object.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="object">The object to operate on.</param>
/// <param name="index">The index to delete.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="JsValueRef" name="index" />
    </Parameters>
  </Export>
  <Export name="JsHasIndexedPropertiesExternalData" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Determines whether an object has its indexed properties in external data.
/// </summary>
/// <param name="object">The object.</param>
/// <param name="value">Whether the object has its indexed properties in external data.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="bool" name="value" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetIndexedPropertiesExternalData" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Retrieves an object's indexed properties external data information.
/// </summary>
/// <param name="object">The object.</param>
/// <param name="data">The external data back store for the object's indexed properties.</param>
/// <param name="arrayType">The array element type in external data.</param>
/// <param name="elementLength">The number of array elements in external data.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="IntPtr" name="data" direction="Out" />
      <Parameter type="JsTypedArrayType" name="arrayType" direction="Out" />
      <Parameter type="uint" name="elementLength" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsSetIndexedPropertiesToExternalData" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Sets an object's indexed properties to external data. The external data will be used as back
///     store for the object's indexed properties and accessed like a typed array.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="object">The object to operate on.</param>
/// <param name="data">The external data to be used as back store for the object's indexed properties.</param>
/// <param name="arrayType">The array element type in external data.</param>
/// <param name="elementLength">The number of array elements in external data.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="IntPtr" name="data" />
      <Parameter type="JsTypedArrayType" name="arrayType" />
      <Parameter type="uint" name="elementLength" />
    </Parameters>
  </Export>
  <Export name="JsEquals" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Compare two JavaScript values for equality.
/// </summary>
/// <remarks>
///     <para>
///     This function is equivalent to the <c>==</c> operator in Javascript.
///     </para>
///     <para>
///     Requires an active script context.
///     </para>
/// </remarks>
/// <param name="object1">The first object to compare.</param>
/// <param name="object2">The second object to compare.</param>
/// <param name="result">Whether the values are equal.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="object1" />
      <Parameter type="JsValueRef" name="object2" />
      <Parameter type="bool" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsStrictEquals" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Compare two JavaScript values for strict equality.
/// </summary>
/// <remarks>
///     <para>
///     This function is equivalent to the <c>===</c> operator in Javascript.
///     </para>
///     <para>
///     Requires an active script context.
///     </para>
/// </remarks>
/// <param name="object1">The first object to compare.</param>
/// <param name="object2">The second object to compare.</param>
/// <param name="result">Whether the values are strictly equal.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="object1" />
      <Parameter type="JsValueRef" name="object2" />
      <Parameter type="bool" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsHasExternalData" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Determines whether an object is an external object.
/// </summary>
/// <param name="object">The object.</param>
/// <param name="value">Whether the object is an external object.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="bool" name="value" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetExternalData" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Retrieves the data from an external object.
/// </summary>
/// <param name="object">The external object.</param>
/// <param name="externalData">
///     The external data stored in the object. Can be null if no external data is stored in the
///     object.
/// </param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="IntPtr" name="externalData" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsSetExternalData" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Sets the external data on an external object.
/// </summary>
/// <param name="object">The external object.</param>
/// <param name="externalData">
///     The external data to be stored in the object. Can be null if no external data is
///     to be stored in the object.
/// </param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="@object" />
      <Parameter type="IntPtr" name="externalData" />
    </Parameters>
  </Export>
  <Export name="JsCreateArray" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a Javascript array object.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="length">The initial length of the array.</param>
/// <param name="result">The new array object.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint" name="length" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreateArrayBuffer" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a Javascript ArrayBuffer object.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="byteLength">
///     The number of bytes in the ArrayBuffer.
/// </param>
/// <param name="result">The new ArrayBuffer object.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint" name="byteLength" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreateExternalArrayBuffer" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a Javascript ArrayBuffer object to access external memory.
/// </summary>
/// <remarks>Requires an active script context.</remarks>
/// <param name="data">A pointer to the external memory.</param>
/// <param name="byteLength">The number of bytes in the external memory.</param>
/// <param name="finalizeCallback">A callback for when the object is finalized. May be null.</param>
/// <param name="callbackState">User provided state that will be passed back to finalizeCallback.</param>
/// <param name="result">The new ArrayBuffer object.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="IntPtr" name="data" />
      <Parameter type="uint" name="byteLength" />
      <Parameter type="JsFinalizeCallback" name="finalizeCallback" />
      <Parameter type="IntPtr" name="callbackState" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreateTypedArray" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a Javascript typed array object.
/// </summary>
/// <remarks>
///     <para>
///     The <c>baseArray</c> can be an <c>ArrayBuffer</c>, another typed array, or a JavaScript
///     <c>Array</c>. The returned typed array will use the baseArray if it is an ArrayBuffer, or
///     otherwise create and use a copy of the underlying source array.
///     </para>
///     <para>
///     Requires an active script context.
///     </para>
/// </remarks>
/// <param name="arrayType">The type of the array to create.</param>
/// <param name="baseArray">
///     The base array of the new array. Use <c>JS_INVALID_REFERENCE</c> if no base array.
/// </param>
/// <param name="byteOffset">
///     The offset in bytes from the start of baseArray (ArrayBuffer) for result typed array to reference.
///     Only applicable when baseArray is an ArrayBuffer object. Must be 0 otherwise.
/// </param>
/// <param name="elementLength">
///     The number of elements in the array. Only applicable when creating a new typed array without
///     baseArray (baseArray is <c>JS_INVALID_REFERENCE</c>) or when baseArray is an ArrayBuffer object.
///     Must be 0 otherwise.
/// </param>
/// <param name="result">The new typed array object.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsTypedArrayType" name="arrayType" />
      <Parameter type="JsValueRef" name="baseArray" />
      <Parameter type="uint" name="byteOffset" />
      <Parameter type="uint" name="elementLength" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreateDataView" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a Javascript DataView object.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="arrayBuffer">
///     An existing ArrayBuffer object to use as the storage for the result DataView object.
/// </param>
/// <param name="byteOffset">
///     The offset in bytes from the start of arrayBuffer for result DataView to reference.
/// </param>
/// <param name="byteLength">
///     The number of bytes in the ArrayBuffer for result DataView to reference.
/// </param>
/// <param name="result">The new DataView object.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="arrayBuffer" />
      <Parameter type="uint" name="byteOffset" />
      <Parameter type="uint" name="byteLength" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetTypedArrayInfo" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Obtains frequently used properties of a typed array.
/// </summary>
/// <param name="typedArray">The typed array instance.</param>
/// <param name="arrayType">The type of the array.</param>
/// <param name="arrayBuffer">The ArrayBuffer backstore of the array.</param>
/// <param name="byteOffset">The offset in bytes from the start of arrayBuffer referenced by the array.</param>
/// <param name="byteLength">The number of bytes in the array.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="typedArray" />
      <Parameter type="JsTypedArrayType" name="arrayType" direction="Out" />
      <Parameter type="JsValueRef" name="arrayBuffer" direction="Out" />
      <Parameter type="uint" name="byteOffset" direction="Out" />
      <Parameter type="uint" name="byteLength" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetArrayBufferStorage" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Obtains the underlying memory storage used by an <c>ArrayBuffer</c>.
/// </summary>
/// <param name="arrayBuffer">The ArrayBuffer instance.</param>
/// <param name="buffer">
///     The ArrayBuffer's buffer. The lifetime of the buffer returned is the same as the lifetime of the
///     the ArrayBuffer. The buffer pointer does not count as a reference to the ArrayBuffer for the purpose
///     of garbage collection.
/// </param>
/// <param name="bufferLength">The number of bytes in the buffer.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="arrayBuffer" />
      <Parameter type="IntPtr" name="buffer" direction="Out" />
      <Parameter type="uint" name="bufferLength" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetTypedArrayStorage" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Obtains the underlying memory storage used by a typed array.
/// </summary>
/// <param name="typedArray">The typed array instance.</param>
/// <param name="buffer">
///     The array's buffer. The lifetime of the buffer returned is the same as the lifetime of the
///     the array. The buffer pointer does not count as a reference to the array for the purpose
///     of garbage collection.
/// </param>
/// <param name="bufferLength">The number of bytes in the buffer.</param>
/// <param name="arrayType">The type of the array.</param>
/// <param name="elementSize">
///     The size of an element of the array.
/// </param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="typedArray" />
      <Parameter type="IntPtr" name="buffer" direction="Out" />
      <Parameter type="uint" name="bufferLength" direction="Out" />
      <Parameter type="JsTypedArrayType" name="arrayType" direction="Out" />
      <Parameter type="int" name="elementSize" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetDataViewStorage" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Obtains the underlying memory storage used by a DataView.
/// </summary>
/// <param name="dataView">The DataView instance.</param>
/// <param name="buffer">
///     The DataView's buffer. The lifetime of the buffer returned is the same as the lifetime of the
///     the DataView. The buffer pointer does not count as a reference to the DataView for the purpose
///     of garbage collection.
/// </param>
/// <param name="bufferLength">The number of bytes in the buffer.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="dataView" />
      <Parameter type="IntPtr" name="buffer" direction="Out" />
      <Parameter type="uint" name="bufferLength" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCallFunction" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Invokes a function.
/// </summary>
/// <remarks>
///     Requires thisArg as first argument of arguments.
///     Requires an active script context.
/// </remarks>
/// <param name="function">The function to invoke.</param>
/// <param name="arguments">The arguments to the call.</param>
/// <param name="argumentCount">The number of arguments being passed in to the function.</param>
/// <param name="result">The value returned from the function invocation, if any.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="function" />
      <Parameter type="JsValueRef[]" name="arguments" />
      <Parameter type="ushort" name="argumentCount" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsConstructObject" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Invokes a function as a constructor.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="function">The function to invoke as a constructor.</param>
/// <param name="arguments">The arguments to the call.</param>
/// <param name="argumentCount">The number of arguments being passed in to the function.</param>
/// <param name="result">The value returned from the function invocation.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="function" />
      <Parameter type="JsValueRef[]" name="arguments" />
      <Parameter type="ushort" name="argumentCount" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreateFunction" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a new JavaScript function.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="nativeFunction">The method to call when the function is invoked.</param>
/// <param name="callbackState">
///     User provided state that will be passed back to the callback.
/// </param>
/// <param name="function">The new function object.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsNativeFunction" name="nativeFunction" />
      <Parameter type="IntPtr" name="callbackState" />
      <Parameter type="JsValueRef" name="function" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreateNamedFunction" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a new JavaScript function with name.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="name">The name of this function that will be used for diagnostics and stringification purposes.</param>
/// <param name="nativeFunction">The method to call when the function is invoked.</param>
/// <param name="callbackState">
///     User provided state that will be passed back to the callback.
/// </param>
/// <param name="function">The new function object.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="name" />
      <Parameter type="JsNativeFunction" name="nativeFunction" />
      <Parameter type="IntPtr" name="callbackState" />
      <Parameter type="JsValueRef" name="function" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreateError" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a new JavaScript error object
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="message">Message for the error object.</param>
/// <param name="error">The new error object.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="message" />
      <Parameter type="JsValueRef" name="error" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreateRangeError" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a new JavaScript RangeError error object
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="message">Message for the error object.</param>
/// <param name="error">The new error object.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="message" />
      <Parameter type="JsValueRef" name="error" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreateReferenceError" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a new JavaScript ReferenceError error object
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="message">Message for the error object.</param>
/// <param name="error">The new error object.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="message" />
      <Parameter type="JsValueRef" name="error" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreateSyntaxError" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a new JavaScript SyntaxError error object
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="message">Message for the error object.</param>
/// <param name="error">The new error object.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="message" />
      <Parameter type="JsValueRef" name="error" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreateTypeError" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a new JavaScript TypeError error object
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="message">Message for the error object.</param>
/// <param name="error">The new error object.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="message" />
      <Parameter type="JsValueRef" name="error" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsCreateURIError" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a new JavaScript URIError error object
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="message">Message for the error object.</param>
/// <param name="error">The new error object.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="message" />
      <Parameter type="JsValueRef" name="error" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsHasException" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Determines whether the runtime of the current context is in an exception state.
/// </summary>
/// <remarks>
///     <para>
///     If a call into the runtime results in an exception (either as the result of running a
///     script or due to something like a conversion failure), the runtime is placed into an
///     "exception state." All calls into any context created by the runtime (except for the
///     exception APIs) will fail with <c>JsErrorInExceptionState</c> until the exception is
///     cleared.
///     </para>
///     <para>
///     If the runtime of the current context is in the exception state when a callback returns
///     into the engine, the engine will automatically rethrow the exception.
///     </para>
///     <para>
///     Requires an active script context.
///     </para>
/// </remarks>
/// <param name="hasException">
///     Whether the runtime of the current context is in the exception state.
/// </param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="bool" name="hasException" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetAndClearException" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Returns the exception that caused the runtime of the current context to be in the
///     exception state and resets the exception state for that runtime.
/// </summary>
/// <remarks>
///     <para>
///     If the runtime of the current context is not in an exception state, this API will return
///     <c>JsErrorInvalidArgument</c>. If the runtime is disabled, this will return an exception
///     indicating that the script was terminated, but it will not clear the exception (the
///     exception will be cleared if the runtime is re-enabled using
///     <c>JsEnableRuntimeExecution</c>).
///     </para>
///     <para>
///     Requires an active script context.
///     </para>
/// </remarks>
/// <param name="exception">The exception for the runtime of the current context.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="exception" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsSetException" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Sets the runtime of the current context to an exception state.
/// </summary>
/// <remarks>
///     <para>
///     If the runtime of the current context is already in an exception state, this API will
///     return <c>JsErrorInExceptionState</c>.
///     </para>
///     <para>
///     Requires an active script context.
///     </para>
/// </remarks>
/// <param name="exception">
///     The JavaScript exception to set for the runtime of the current context.
/// </param>
/// <returns>
///     JsNoError if the engine was set into an exception state, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="exception" />
    </Parameters>
  </Export>
  <Export name="JsDisableRuntimeExecution" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Suspends script execution and terminates any running scripts in a runtime.
/// </summary>
/// <remarks>
///     <para>
///     Calls to a suspended runtime will fail until <c>JsEnableRuntimeExecution</c> is called.
///     </para>
///     <para>
///     This API does not have to be called on the thread the runtime is active on. Although the
///     runtime will be set into a suspended state, an executing script may not be suspended
///     immediately; a running script will be terminated with an uncatchable exception as soon as
///     possible.
///     </para>
///     <para>
///     Suspending execution in a runtime that is already suspended is a no-op.
///     </para>
/// </remarks>
/// <param name="runtime">The runtime to be suspended.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsRuntimeHandle" name="runtime" />
    </Parameters>
  </Export>
  <Export name="JsEnableRuntimeExecution" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Enables script execution in a runtime.
/// </summary>
/// <remarks>
///     Enabling script execution in a runtime that already has script execution enabled is a
///     no-op.
/// </remarks>
/// <param name="runtime">The runtime to be enabled.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsRuntimeHandle" name="runtime" />
    </Parameters>
  </Export>
  <Export name="JsIsRuntimeExecutionDisabled" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Returns a value that indicates whether script execution is disabled in the runtime.
/// </summary>
/// <param name="runtime">Specifies the runtime to check if execution is disabled.</param>
/// <param name="isDisabled">If execution is disabled, <c>true</c>, <c>false</c> otherwise.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsRuntimeHandle" name="runtime" />
      <Parameter type="bool" name="isDisabled" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsSetPromiseContinuationCallback" target="Common" source="ChakraCommon.h">
    <Description>
      <![CDATA[
/// <summary>
///     Sets a promise continuation callback function that is called by the context when a task
///     needs to be queued for future execution
/// </summary>
/// <remarks>
///     <para>
///     Requires an active script context.
///     </para>
/// </remarks>
/// <param name="promiseContinuationCallback">The callback function being set.</param>
/// <param name="callbackState">
///     User provided state that will be passed back to the callback.
/// </param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsPromiseContinuationCallback" name="promiseContinuationCallback" />
      <Parameter type="IntPtr" name="callbackState" />
    </Parameters>
  </Export>
  <!--
  ***************************************
  **
  ** ChakraDebug.h
  **
  ***************************************
  -->
  <Export name="JsDiagStartDebugging" target="Common" source="ChakraDebug.h">
    <Description>
      <![CDATA[
/// <summary>
///     Starts debugging in the given runtime.
/// </summary>
/// <param name="runtimeHandle">Runtime to put into debug mode.</param>
/// <param name="debugEventCallback">Registers a callback to be called on every JsDiagDebugEvent.</param>
/// <param name="callbackState">User provided state that will be passed back to the callback.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
/// <remarks>
///     The runtime should be active on the current thread and should not be in debug state.
/// </remarks>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsRuntimeHandle" name="runtimeHandle" />
      <Parameter type="JsDiagDebugEventCallback" name="debugEventCallback" />
      <Parameter type="IntPtr" name="callbackState" />
    </Parameters>
  </Export>
  <Export name="JsDiagStopDebugging" target="Common" source="ChakraDebug.h">
    <Description>
      <![CDATA[
/// <summary>
///     Stops debugging in the given runtime.
/// </summary>
/// <param name="runtimeHandle">Runtime to stop debugging.</param>
/// <param name="callbackState">User provided state that was passed in JsDiagStartDebugging.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
/// <remarks>
///     The runtime should be active on the current thread and in debug state.
/// </remarks>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsRuntimeHandle" name="runtimeHandle" />
      <Parameter type="IntPtr" name="callbackState" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsDiagRequestAsyncBreak" target="Common" source="ChakraDebug.h">
    <Description>
      <![CDATA[
/// <summary>
///     Request the runtime to break on next JavaScript statement.
/// </summary>
/// <param name="runtimeHandle">Runtime to request break.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
/// <remarks>
///     The runtime should be in debug state. This API can be called from another runtime.
/// </remarks>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsRuntimeHandle" name="runtimeHandle" />
    </Parameters>
  </Export>
  <Export name="JsDiagGetBreakpoints" target="Common" source="ChakraDebug.h">
    <Description>
      <![CDATA[
/// <summary>
///     List all breakpoints in the current runtime.
/// </summary>
/// <param name="breakpoints">Array of breakpoints.</param>
/// <remarks>
///     <para>
///     [{
///         "breakpointId" : 1,
///         "scriptId" : 1,
///         "line" : 0,
///         "column" : 62
///     }]
///     </para>
/// </remarks>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
/// <remarks>
///     The current runtime should be in debug state. This API can be called when runtime is at a break or running.
/// </remarks>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="breakpoints" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsDiagSetBreakpoint" target="Common" source="ChakraDebug.h">
    <Description>
      <![CDATA[
/// <summary>
///     Sets breakpoint in the specified script at give location.
/// </summary>
/// <param name="scriptId">Id of script from JsDiagGetScripts or JsDiagGetSource to put breakpoint.</param>
/// <param name="lineNumber">0 based line number to put breakpoint.</param>
/// <param name="columnNumber">0 based column number to put breakpoint.</param>
/// <param name="breakpoint">Breakpoint object with id, line and column if success.</param>
/// <remarks>
///     <para>
///     {
///         "breakpointId" : 1,
///         "line" : 2,
///         "column" : 4
///     }
///     </para>
/// </remarks>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
/// <remarks>
///     The current runtime should be in debug state. This API can be called when runtime is at a break or running.
/// </remarks>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint" name="scriptId" />
      <Parameter type="uint" name="lineNumber" />
      <Parameter type="uint" name="columnNumber" />
      <Parameter type="JsValueRef" name="breakpoint" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsDiagRemoveBreakpoint" target="Common" source="ChakraDebug.h">
    <Description>
      <![CDATA[
/// <summary>
///     Remove a breakpoint.
/// </summary>
/// <param name="breakpointId">Breakpoint id returned from JsDiagSetBreakpoint.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
/// <remarks>
///     The current runtime should be in debug state. This API can be called when runtime is at a break or running.
/// </remarks>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint" name="breakpointId" />
    </Parameters>
  </Export>
  <Export name="JsDiagSetBreakOnException" target="Common" source="ChakraDebug.h">
    <Description>
      <![CDATA[
/// <summary>
///     Sets break on exception handling.
/// </summary>
/// <param name="runtimeHandle">Runtime to set break on exception attributes.</param>
/// <param name="exceptionAttributes">Mask of JsDiagBreakOnExceptionAttributes to set.</param>
/// <remarks>
///     <para>
///         If this API is not called the default value is set to JsDiagBreakOnExceptionAttributeUncaught in the runtime.
///     </para>
/// </remarks>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
/// <remarks>
///     The runtime should be in debug state. This API can be called from another runtime.
/// </remarks>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsRuntimeHandle" name="runtimeHandle" />
      <Parameter type="JsDiagBreakOnExceptionAttributes" name="exceptionAttributes" />
    </Parameters>
  </Export>
  <Export name="JsDiagGetBreakOnException" target="Common" source="ChakraDebug.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets break on exception setting.
/// </summary>
/// <param name="runtimeHandle">Runtime from which to get break on exception attributes, should be in debug mode.</param>
/// <param name="exceptionAttributes">Mask of JsDiagBreakOnExceptionAttributes.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
/// <remarks>
///     The runtime should be in debug state. This API can be called from another runtime.
/// </remarks>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsRuntimeHandle" name="runtimeHandle" />
      <Parameter type="JsDiagBreakOnExceptionAttributes" name="exceptionAttributes" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsDiagSetStepType" target="Common" source="ChakraDebug.h">
    <Description>
      <![CDATA[
/// <summary>
///     Sets the step type in the runtime after a debug break.
/// </summary>
/// <remarks>
///     Requires to be at a debug break.
/// </remarks>
/// <param name="resumeType">Type of JsDiagStepType.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
/// <remarks>
///     The current runtime should be in debug state. This API can only be called when runtime is at a break.
/// </remarks>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsDiagStepType" name="stepType" />
    </Parameters>
  </Export>
  <Export name="JsDiagGetScripts" target="Common" source="ChakraDebug.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets list of scripts.
/// </summary>
/// <param name="scriptsArray">Array of script objects.</param>
/// <remarks>
///     <para>
///     [{
///         "scriptId" : 2,
///         "fileName" : "c:\\Test\\Test.js",
///         "lineCount" : 4,
///         "sourceLength" : 111
///       }, {
///         "scriptId" : 3,
///         "parentScriptId" : 2,
///         "scriptType" : "eval code",
///         "lineCount" : 1,
///         "sourceLength" : 12
///     }]
///     </para>
/// </remarks>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
/// <remarks>
///     The current runtime should be in debug state. This API can be called when runtime is at a break or running.
/// </remarks>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="scriptsArray" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsDiagGetSource" target="Common" source="ChakraDebug.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets source for a specific script identified by scriptId from JsDiagGetScripts.
/// </summary>
/// <param name="scriptId">Id of the script.</param>
/// <param name="source">Source object.</param>
/// <remarks>
///     <para>
///     {
///         "scriptId" : 1,
///         "fileName" : "c:\\Test\\Test.js",
///         "lineCount" : 12,
///         "sourceLength" : 15154,
///         "source" : "var x = 1;"
///     }
///     </para>
/// </remarks>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
/// <remarks>
///     The current runtime should be in debug state. This API can be called when runtime is at a break or running.
/// </remarks>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint" name="scriptId" />
      <Parameter type="JsValueRef" name="source" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsDiagGetFunctionPosition" target="Common" source="ChakraDebug.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the source information for a function object.
/// </summary>
/// <param name="function">JavaScript function.</param>
/// <param name="functionPosition">Function position - scriptId, start line, start column, line number of first statement, column number of first statement.</param>
/// <remarks>
///     <para>
///     {
///         "scriptId" : 1,
///         "fileName" : "c:\\Test\\Test.js",
///         "line" : 1,
///         "column" : 2,
///         "firstStatementLine" : 6,
///         "firstStatementColumn" : 0
///     }
///     </para>
/// </remarks>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
/// <remarks>
///     This API can be called when runtime is at a break or running.
/// </remarks>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="function" />
      <Parameter type="JsValueRef" name="functionPosition" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsDiagGetStackTrace" target="Common" source="ChakraDebug.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the stack trace information.
/// </summary>
/// <param name="stackTrace">Stack trace information.</param>
/// <remarks>
///     <para>
///     [{
///         "index" : 0,
///         "scriptId" : 2,
///         "line" : 3,
///         "column" : 0,
///         "sourceLength" : 9,
///         "sourceText" : "var x = 1",
///         "functionHandle" : 1
///     }]
///    </para>
/// </remarks>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
/// <remarks>
///     The current runtime should be in debug state. This API can only be called when runtime is at a break.
/// </remarks>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="stackTrace" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsDiagGetStackProperties" target="Common" source="ChakraDebug.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the list of properties corresponding to the frame.
/// </summary>
/// <param name="stackFrameIndex">Index of stack frame from JsDiagGetStackTrace.</param>
/// <param name="properties">Object of properties array (properties, scopes and globals).</param>
/// <remarks>
///     <para>
///     propertyAttributes is a bit mask of
///         NONE = 0x1,
///         HAVE_CHILDRENS = 0x2,
///         READ_ONLY_VALUE = 0x4,
///     </para>
///     <para>
///     {
///         "thisObject": {
///             "name": "this",
///             "type" : "object",
///             "className" : "Object",
///             "display" : "{...}",
///             "propertyAttributes" : 1,
///             "handle" : 306
///         },
///         "exception" : {
///             "name" : "{exception}",
///             "type" : "object",
///             "display" : "'a' is undefined",
///             "className" : "Error",
///             "propertyAttributes" : 1,
///             "handle" : 307
///         }
///         "arguments" : {
///             "name" : "arguments",
///             "type" : "object",
///             "display" : "{...}",
///             "className" : "Object",
///             "propertyAttributes" : 1,
///             "handle" : 190
///         },
///         "returnValue" : {
///             "name" : "[Return value]",
///             "type" : "undefined",
///             "propertyAttributes" : 0,
///             "handle" : 192
///         },
///         "functionCallsReturn" : [{
///                 "name" : "[foo1 returned]",
///                 "type" : "number",
///                 "value" : 1,
///                 "propertyAttributes" : 2,
///                 "handle" : 191
///             }
///         ],
///         "locals" : [],
///         "scopes" : [{
///                 "index" : 0,
///                 "handle" : 193
///             }
///         ],
///         "globals" : {
///             "handle" : 194
///         }
///     }
///     </para>
/// </remarks>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
/// <remarks>
///     The current runtime should be in debug state. This API can only be called when runtime is at a break.
/// </remarks>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint" name="stackFrameIndex" />
      <Parameter type="JsValueRef" name="properties" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsDiagGetProperties" target="Common" source="ChakraDebug.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the list of children of a handle.
/// </summary>
/// <param name="objectHandle">Handle of object.</param>
/// <param name="fromCount">0-based from count of properties, usually 0.</param>
/// <param name="totalCount">Number of properties to return.</param>
/// <param name="propertiesObject">Array of properties.</param>
/// <remarks>Handle should be from objects returned from call to JsDiagGetStackProperties.</remarks>
/// <remarks>For scenarios where object have large number of properties totalCount can be used to control how many properties are given.</remarks>
/// <remarks>
///     <para>
///     {
///         "totalPropertiesOfObject": 10,
///         "properties" : [{
///                 "name" : "__proto__",
///                 "type" : "object",
///                 "display" : "{...}",
///                 "className" : "Object",
///                 "propertyAttributes" : 1,
///                 "handle" : 156
///             }
///         ],
///         "debuggerOnlyProperties" : [{
///                 "name" : "[Map]",
///                 "type" : "string",
///                 "value" : "size = 0",
///                 "propertyAttributes" : 2,
///                 "handle" : 157
///             }
///         ]
///     }
///     </para>
/// </remarks>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
/// <remarks>
///     The current runtime should be in debug state. This API can only be called when runtime is at a break.
/// </remarks>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint" name="objectHandle" />
      <Parameter type="uint" name="fromCount" />
      <Parameter type="uint" name="totalCount" />
      <Parameter type="JsValueRef" name="propertiesObject" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsDiagGetObjectFromHandle" target="Common" source="ChakraDebug.h">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the object corresponding to handle.
/// </summary>
/// <param name="objectHandle">Handle of object.</param>
/// <param name="handleObject">Object corresponding to the handle.</param>
/// <remarks>
///     <para>
///     {
///         "scriptId" : 24,
///          "line" : 1,
///          "column" : 63,
///          "name" : "foo",
///          "type" : "function",
///          "handle" : 2
///     }
///    </para>
/// </remarks>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
/// <remarks>
///     The current runtime should be in debug state. This API can only be called when runtime is at a break.
/// </remarks>
]]>
    </Description>
    <Parameters>
      <Parameter type="uint" name="objectHandle" />
      <Parameter type="JsValueRef" name="handleObject" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsDiagEvaluate" target="Common" source="ChakraDebug.h">
    <Description>
      <![CDATA[
/// <summary>
///     Evaluates an expression on given frame.
/// </summary>
/// <param name="expression">
///     Javascript String or ArrayBuffer (incl. ExternalArrayBuffer).
/// </param>
/// <param name="stackFrameIndex">Index of stack frame on which to evaluate the expression.</param>
/// <param name="parseAttributes">
///     Defines how `expression` (JsValueRef) should be parsed.
///     - `JsParseScriptAttributeNone` when `expression` is a Utf8 encoded ArrayBuffer and/or a Javascript String (encoding independent)
///     - `JsParseScriptAttributeArrayBufferIsUtf16Encoded` when `expression` is Utf16 Encoded ArrayBuffer
///     - `JsParseScriptAttributeLibraryCode` has no use for this function and has similar effect with `JsParseScriptAttributeNone`
/// </param>
/// <param name="forceSetValueProp">Forces the result to contain the raw value of the expression result.</param>
/// <param name="evalResult">Result of evaluation.</param>
/// <remarks>
///     <para>
///     evalResult when evaluating 'this' and return is JsNoError
///     {
///         "name" : "this",
///         "type" : "object",
///         "className" : "Object",
///         "display" : "{...}",
///         "propertyAttributes" : 1,
///         "handle" : 18
///     }
///
///     evalResult when evaluating a script which throws JavaScript error and return is JsErrorScriptException
///     {
///         "name" : "a.b.c",
///         "type" : "object",
///         "className" : "Error",
///         "display" : "'a' is undefined",
///         "propertyAttributes" : 1,
///         "handle" : 18
///     }
///     </para>
/// </remarks>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, evalResult will contain the result
///     The code <c>JsErrorScriptException</c> if evaluate generated a JavaScript exception, evalResult will contain the error details
///     Other error code for invalid parameters or API was not called at break
/// </returns>
/// <remarks>
///     The current runtime should be in debug state. This API can only be called when runtime is at a break.
/// </remarks>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="expression" />
      <Parameter type="uint" name="stackFrameIndex" />
      <Parameter type="JsParseScriptAttributes" name="parseAttributes" />
      <Parameter type="bool" name="forceSetValueProp" />
      <Parameter type="JsValueRef" name="evalResult" direction="Out" />
    </Parameters>
  </Export>
  <!-- 
  ***************************************
  **
  ** ChakraCommonWindows.h
  **
  ***************************************
  -->
  <Export name="JsParseScript" target="WindowsOnly" source="ChakraCommonWindows.h" dllImportEx=", CharSet = CharSet.Unicode">
    <Description>
      <![CDATA[
/// <summary>
///     Parses a script and returns a function representing the script.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="script">The script to parse.</param>
/// <param name="sourceContext">
///     A cookie identifying the script that can be used by debuggable script contexts.
/// </param>
/// <param name="sourceUrl">The location the script came from.</param>
/// <param name="result">A function representing the script code.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="script" />
      <Parameter type="JsSourceContext" name="sourceContext" />
      <Parameter type="string" name="sourceUrl" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsParseScriptWithAttributes" target="WindowsOnly" source="ChakraCommonWindows.h" dllImportEx=", CharSet = CharSet.Unicode">
    <Description>
      <![CDATA[
/// <summary>
///     Parses a script and returns a function representing the script.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="script">The script to parse.</param>
/// <param name="sourceContext">
///     A cookie identifying the script that can be used by debuggable script contexts.
/// </param>
/// <param name="sourceUrl">The location the script came from.</param>
/// <param name="parseAttributes">Attribute mask for parsing the script</param>
/// <param name="result">A function representing the script code.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="script" />
      <Parameter type="JsSourceContext" name="sourceContext" />
      <Parameter type="string" name="sourceUrl" />
      <Parameter type="JsParseScriptAttributes" name="parseAttributes" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsRunScript" target="WindowsOnly" source="ChakraCommonWindows.h" dllImportEx=", CharSet = CharSet.Unicode">
    <Description>
      <![CDATA[
/// <summary>
///     Executes a script.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="script">The script to run.</param>
/// <param name="sourceContext">
///     A cookie identifying the script that can be used by debuggable script contexts.
/// </param>
/// <param name="sourceUrl">The location the script came from.</param>
/// <param name="result">The result of the script, if any. This parameter can be null.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="script" />
      <Parameter type="JsSourceContext" name="sourceContext" />
      <Parameter type="string" name="sourceUrl" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsSerializeScript" target="WindowsOnly" source="ChakraCommonWindows.h" dllImportEx=", CharSet = CharSet.Unicode">
    <Description>
      <![CDATA[
/// <summary>
///     Serializes a parsed script to a buffer than can be reused.
/// </summary>
/// <remarks>
///     <para>
///     <c>JsSerializeScript</c> parses a script and then stores the parsed form of the script in a
///     runtime-independent format. The serialized script then can be deserialized in any
///     runtime without requiring the script to be re-parsed.
///     </para>
///     <para>
///     Requires an active script context.
///     </para>
/// </remarks>
/// <param name="script">The script to serialize.</param>
/// <param name="buffer">The buffer to put the serialized script into. Can be null.</param>
/// <param name="bufferSize">
///     On entry, the size of the buffer, in bytes; on exit, the size of the buffer, in bytes,
///     required to hold the serialized script.
/// </param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="script" />
      <Parameter type="byte[]" name="buffer" />
      <Parameter type="uint" name="bufferSize" direction="Ref" />
    </Parameters>
  </Export>
  <Export name="JsParseSerializedScriptWithCallback" target="WindowsOnly" source="ChakraCommonWindows.h" dllImportEx=", CharSet = CharSet.Unicode">
    <Description>
      <![CDATA[
/// <summary>
///     Parses a serialized script and returns a function representing the script.
///     Provides the ability to lazy load the script source only if/when it is needed.
/// </summary>
/// <remarks>
///     <para>
///     Requires an active script context.
///     </para>
///     <para>
///     The runtime will hold on to the buffer until all instances of any functions created from
///     the buffer are garbage collected.  It will then call scriptUnloadCallback to inform the
///     caller it is safe to release.
///     </para>
/// </remarks>
/// <param name="scriptLoadCallback">Callback called when the source code of the script needs to be loaded.</param>
/// <param name="scriptUnloadCallback">Callback called when the serialized script and source code are no longer needed.</param>
/// <param name="buffer">The serialized script.</param>
/// <param name="sourceContext">
///     A cookie identifying the script that can be used by debuggable script contexts.
///     This context will passed into scriptLoadCallback and scriptUnloadCallback.
/// </param>
/// <param name="sourceUrl">The location the script came from.</param>
/// <param name="result">A function representing the script code.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsSerializedScriptLoadSourceCallback" name="scriptLoadCallback" />
      <Parameter type="JsSerializedScriptUnloadCallback" name="scriptUnloadCallback" />
      <Parameter type="byte[]" name="buffer" />
      <Parameter type="JsSourceContext" name="sourceContext" />
      <Parameter type="string" name="sourceUrl" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsRunSerializedScriptWithCallback" target="WindowsOnly" source="ChakraCommonWindows.h" dllImportEx=", CharSet = CharSet.Unicode">
    <Description>
      <![CDATA[
/// <summary>
///     Runs a serialized script.
///     Provides the ability to lazy load the script source only if/when it is needed.
/// </summary>
/// <remarks>
///     <para>
///     Requires an active script context.
///     </para>
///     <para>
///     The runtime will hold on to the buffer until all instances of any functions created from
///     the buffer are garbage collected.  It will then call scriptUnloadCallback to inform the
///     caller it is safe to release.
///     </para>
/// </remarks>
/// <param name="scriptLoadCallback">Callback called when the source code of the script needs to be loaded.</param>
/// <param name="scriptUnloadCallback">Callback called when the serialized script and source code are no longer needed.</param>
/// <param name="buffer">The serialized script.</param>
/// <param name="sourceContext">
///     A cookie identifying the script that can be used by debuggable script contexts.
///     This context will passed into scriptLoadCallback and scriptUnloadCallback.
/// </param>
/// <param name="sourceUrl">The location the script came from.</param>
/// <param name="result">
///     The result of running the script, if any. This parameter can be null.
/// </param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsSerializedScriptLoadSourceCallback" name="scriptLoadCallback" />
      <Parameter type="JsSerializedScriptUnloadCallback" name="scriptUnloadCallback" />
      <Parameter type="byte[]" name="buffer" />
      <Parameter type="JsSourceContext" name="sourceContext" />
      <Parameter type="string" name="sourceUrl" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsParseSerializedScript" target="WindowsOnly" source="ChakraCommonWindows.h" dllImportEx=", CharSet = CharSet.Unicode">
    <Description>
      <![CDATA[
/// <summary>
///     Parses a serialized script and returns a function representing the script.
/// </summary>
/// <remarks>
///     <para>
///     Requires an active script context.
///     </para>
///     <para>
///     The runtime will hold on to the buffer until all instances of any functions created from
///     the buffer are garbage collected.
///     </para>
/// </remarks>
/// <param name="script">The script to parse.</param>
/// <param name="buffer">The serialized script.</param>
/// <param name="sourceContext">
///     A cookie identifying the script that can be used by debuggable script contexts.
/// </param>
/// <param name="sourceUrl">The location the script came from.</param>
/// <param name="result">A function representing the script code.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="script" />
      <Parameter type="byte[]" name="buffer" />
      <Parameter type="JsSourceContext" name="sourceContext" />
      <Parameter type="string" name="sourceUrl" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsRunSerializedScript" target="WindowsOnly" source="ChakraCommonWindows.h" dllImportEx=", CharSet = CharSet.Unicode">
    <Description>
      <![CDATA[
/// <summary>
///     Runs a serialized script.
/// </summary>
/// <remarks>
///     <para>
///     Requires an active script context.
///     </para>
///     <para>
///     The runtime will hold on to the buffer until all instances of any functions created from
///     the buffer are garbage collected.
///     </para>
/// </remarks>
/// <param name="script">The source code of the serialized script.</param>
/// <param name="buffer">The serialized script.</param>
/// <param name="sourceContext">
///     A cookie identifying the script that can be used by debuggable script contexts.
/// </param>
/// <param name="sourceUrl">The location the script came from.</param>
/// <param name="result">
///     The result of running the script, if any. This parameter can be null.
/// </param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="script" />
      <Parameter type="byte[]" name="buffer" />
      <Parameter type="JsSourceContext" name="sourceContext" />
      <Parameter type="string" name="sourceUrl" />
      <Parameter type="JsValueRef" name="result" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetPropertyIdFromName" target="WindowsOnly" source="ChakraCommonWindows.h" dllImportEx=", CharSet = CharSet.Unicode">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the property ID associated with the name.
/// </summary>
/// <remarks>
///     <para>
///     Property IDs are specific to a context and cannot be used across contexts.
///     </para>
///     <para>
///     Requires an active script context.
///     </para>
/// </remarks>
/// <param name="name">
///     The name of the property ID to get or create. The name may consist of only digits.
/// </param>
/// <param name="propertyId">The property ID in this runtime for the given name.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="name" />
      <Parameter type="JsPropertyIdRef" name="propertyId" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsGetPropertyNameFromId" target="WindowsOnly" source="ChakraCommonWindows.h" dllImportEx=", CharSet = CharSet.Unicode">
    <Description>
      <![CDATA[
/// <summary>
///     Gets the name associated with the property ID.
/// </summary>
/// <remarks>
///     <para>
///     Requires an active script context.
///     </para>
///     <para>
///     The returned buffer is valid as long as the runtime is alive and cannot be used
///     once the runtime has been disposed.
///     </para>
/// </remarks>
/// <param name="propertyId">The property ID to get the name of.</param>
/// <param name="name">The name associated with the property ID.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsPropertyIdRef" name="propertyId" />
      <Parameter type="IntPtr" name="name" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsPointerToString" target="WindowsOnly" source="ChakraCommonWindows.h" dllImportEx=", CharSet = CharSet.Unicode">
    <Description>
      <![CDATA[
/// <summary>
///     Creates a string value from a string pointer.
/// </summary>
/// <remarks>
///     Requires an active script context.
/// </remarks>
/// <param name="stringValue">The string pointer to convert to a string value.</param>
/// <param name="stringLength">The length of the string to convert.</param>
/// <param name="value">The new string value.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="string" name="stringValue" />
      <Parameter type="UIntPtr" name="stringLength" />
      <Parameter type="JsValueRef" name="value" direction="Out" />
    </Parameters>
  </Export>
  <Export name="JsStringToPointer" target="WindowsOnly" source="ChakraCommonWindows.h" dllImportEx=", CharSet = CharSet.Unicode">
    <Description>
      <![CDATA[
/// <summary>
///     Retrieves the string pointer of a string value.
/// </summary>
/// <remarks>
///     <para>
///     This function retrieves the string pointer of a string value. It will fail with
///     <c>JsErrorInvalidArgument</c> if the type of the value is not string. The lifetime
///     of the string returned will be the same as the lifetime of the value it came from, however
///     the string pointer is not considered a reference to the value (and so will not keep it
///     from being collected).
///     </para>
///     <para>
///     Requires an active script context.
///     </para>
/// </remarks>
/// <param name="value">The string value to convert to a string pointer.</param>
/// <param name="stringValue">The string pointer.</param>
/// <param name="stringLength">The length of the string.</param>
/// <returns>
///     The code <c>JsNoError</c> if the operation succeeded, a failure code otherwise.
/// </returns>
]]>
    </Description>
    <Parameters>
      <Parameter type="JsValueRef" name="value" />
      <Parameter type="IntPtr" name="stringValue" direction="Out" />
      <Parameter type="UIntPtr" name="stringLength" direction="Out" />
    </Parameters>
  </Export>
</ChakraDefinitions>