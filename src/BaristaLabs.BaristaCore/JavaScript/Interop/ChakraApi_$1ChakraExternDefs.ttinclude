<#@ assembly name="System.Core" 
#><#@ assembly name="System.Xml"
#><#@ assembly name="System.Xml.Linq"
#><#@ assembly name="EnvDTE"
#><#@ import namespace="System"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.Text"
#><#@ import namespace="System.Xml"
#><#@ import namespace="System.Xml.Linq"
#><#@ import namespace="Microsoft.VisualStudio.TextTemplating"
#><#@include file="ChakraApi_$0ChakraExternManager.ttinclude"
#><#
	//Common type mappings
	var typeMap = new Dictionary<string, string>() {
        { "JsRuntimeHandle", "JavaScriptRuntimeSafeHandle" },
		{ "JsContextRef", "JavaScriptContextSafeHandle" },
		{ "JsSourceContext", "JavaScriptSourceContext" },
        { "JsRef", "JavaScriptValueSafeHandle" }, //Not sure about this one...
		{ "JsValueRef", "JavaScriptValueSafeHandle" },
		{ "JsValueRef[]", "IntPtr[]" },
        { "JsPropertyIdRef", "JavaScriptPropertyIdSafeHandle" },
        { "JsPropertyIdType", "JavaScriptPropertyIdType" },
        { "JsModuleRecord", "IntPtr" },
        { "JsParseModuleSourceFlags", "JavaScriptParseModuleSourceFlags" },
		{ "JsModuleHostInfoKind", "JavaScriptModuleHostInfoKind" },

        { "JsTypedArrayType", "JavaScriptTypedArrayType"},
        { "JsNativeFunction", "JavaScriptNativeFunction"},

        { "JsSerializedLoadScriptCallback", "JavaScriptSerializedLoadScriptCallback" },
        { "JsSerializedScriptLoadSourceCallback", "JavaScriptSerializedScriptLoadSourceCallback" },
		{ "JsSerializedScriptUnloadCallback", "JavaScriptSerializedScriptUnloadCallback" },
        { "JsFinalizeCallback", "JavaScriptObjectFinalizeCallback"},
        { "JsPromiseContinuationCallback", "JavaScriptPromiseContinuationCallback"},
        { "JsDiagDebugEventCallback", "JavaScriptDiagDebugEventCallback" },
		{ "FetchImportedModuleCallBack", "JavaScriptFetchImportedModuleCallBack" },
		{ "NotifyModuleReadyCallback", "JavaScriptNotifyModuleReadyCallback" },

		{ "BYTE", "byte[]" },
        { "size_t", "UIntPtr" },
        { "wchar_t", "string" },
        { "char*", "byte[]"},
        { "UIntPtr", "ulong" }
    };

	var hostServiceProvider = (IServiceProvider)this.Host;
	EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
	if (dte == null)
		throw new ArgumentNullException("Could not obtain DTE from host");
	
	var projectItem = dte.Solution.FindProjectItem("ChakraApi_$2Definitions.xml");
	var defsDoc = XDocument.Load(projectItem.FileNames[1]);

	ChakraExternManager.Externs.Clear();
	
	foreach(var export in defsDoc.Descendants("Export")) {
		var def = new ChakraExternManager.ChakraExtern {
			Name = export.Attribute("name").Value,
			Description = export.Element("Description").Value,
			Target = (ChakraExternManager.PlatformTarget)Enum.Parse(typeof(ChakraExternManager.PlatformTarget), export.Attribute("target").Value),
			Source = export.Attribute("source").Value,
        };

		if (export.Attribute("dllImportEx") != null) {
			def.DllImportEx = export.Attribute("dllImportEx").Value;
        }

		foreach(var property in export.Element("Parameters").Descendants("Parameter")) {
			var param = new ChakraExternManager.ExternParameter() {
				Type = property.Attribute("type").Value,
				Name = property.Attribute("name").Value
            };

			if (typeMap.ContainsKey(param.Type)) {
				param.Type = typeMap[param.Type];
            }

			var directionAttribute = property.Attribute("direction");
			if (directionAttribute != null) {
				param.Direction = (ChakraExternManager.ParameterDirection)Enum.Parse(typeof(ChakraExternManager.ParameterDirection), directionAttribute.Value);
            }

			def.Parameters.Add(param);
        }

		ChakraExternManager.Externs.Add(def);
    }
#>